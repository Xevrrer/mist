generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(cuid())
  sessions           Session[]
  username           String?         @unique
  registerAt         DateTime        @default(now())
  image              String?
  password_hash      String?
}

model Session {
  id        String @id
  userId    String
  expiresAt DateTime
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BoardChannelConfig {
  channelId                  BigInt           @id
  guildId                    BigInt
  guild                      Guild            @relation(fields: [guildId], references: [id])
  enabled                    Boolean          @default(false)
  tags                       BoardTagConfig[]
  threadCreatedMessage       String?
  threadStatusChangedMessage String?
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @default(now()) @updatedAt
}

model BoardTagConfig {
  tagId         BigInt             @id
  channelId     BigInt
  name          String
  moderated     Boolean
  emojiId       String?
  emojiName     String?
  isStatus      Boolean            @default(false)
  statusOptions Int                @default(0)
  channel       BoardChannelConfig @relation(fields: [channelId], references: [channelId])
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @default(now()) @updatedAt

}

model Guild {
  id                  BigInt               @id
  tickets             Ticket[]
  ticketConfig        TicketConfig[]
  boardChannelsConfig BoardChannelConfig[]
  managedRolesConfig  ManagedRoleConfig[]
  contentChannelConfig ContentChannelConfig[]
}

model ManagedRoleConfig {
  roleId    BigInt   @id
  guildId   BigInt
  guild     Guild    @relation(fields: [guildId], references: [id])
  managerId BigInt
  enabled   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Ticket {
  channelId BigInt    @id
  guildId   BigInt
  localId   BigInt
  userId    BigInt
  guild     Guild     @relation(fields: [guildId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  closedAt  DateTime?
}

model TicketConfig {
  guildId              BigInt   @id
  guild                Guild    @relation(fields: [guildId], references: [id])
  enabled              Boolean  @default(false)
  categoryId           BigInt?
  localIdCounter       BigInt   @default(1)
  ticketCreatedMessage String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now()) @updatedAt
}


model ContentChannelConfig {
  channelId                  BigInt           @id
  guildId                    BigInt
  guild                      Guild            @relation(fields: [guildId], references: [id])
  enabled                    Boolean          @default(false)
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @default(now()) @updatedAt

  tags             ContentTag[] // Relacja z tagami
}


model ContentThreads {
  id        BigInt      @id @default(autoincrement())
  content   String
  author    String
  commentId ContentComments[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  tags      ThreadTag[]       // Relacja N:N z tagami
}

model ContentComments{
  id        BigInt      @id @default(autoincrement())
  threadId  BigInt
  content   String
  author    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  ContentCommentReactions ContentCommentReactions[]
  
  ContentThreads ContentThreads @relation(fields: [threadId], references: [id])
  //updatedAt DateTime @default(now()) @updatedAt

  
}


model ContentCommentReactions {
  commentId   BigInt
  emoji       String
  userId      BigInt
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt

  comment     ContentComments @relation(fields: [commentId], references: [id])

  @@id([commentId, emoji, userId])
}

model ContentTag {
  id        String              @id 
  channelId BigInt
  name      String
  emoji     String?             
  createdAt DateTime            @default(now())
  updatedAt DateTime            @default(now()) @updatedAt

  channel   ContentChannelConfig @relation(fields: [channelId], references: [channelId])
  threads   ThreadTag[]         

  @@unique([channelId, id]) 
}

model ThreadTag {
  threadId BigInt
  tagId    String

  thread   ContentThreads @relation(fields: [threadId], references: [id])
  tag      ContentTag     @relation(fields: [tagId], references: [id])

  @@id([threadId, tagId])
}